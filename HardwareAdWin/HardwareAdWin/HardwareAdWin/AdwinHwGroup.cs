using System.Collections.Generic;
using System.Linq;
using System.Threading;
using Communication.Interfaces.Generator;
using Communication.Interfaces.Hardware;
using HardwareAdWin.Driver;
using Model.Data.Cards;

namespace HardwareAdWin.HardwareAdWin
{
    //CHANGED Ghareeb 04.10.2016 use of IAdWinDriver instead of AdWinFunctions
    /// <summary>
    /// Provides the functionality to convert raw output of all analog and digital cards to the format understood by the AdWin system, as well as sending the converted output and ordering the system to put the sent data on its physical output.
    /// It includes two dictionaries of all analog and digital cards
    /// </summary>
    /// <seealso cref="Communication.Interfaces.Hardware.IHardwareGroup" />
    public class AdWinHwGroup : IHardwareGroup
    {
        /// <summary>
        /// A dictionary that maps a card name to an instance of <see cref=" AnalogCard"/> which is used to convert and send the output of a single analog card.
        /// </summary>
        private readonly Dictionary<string, AnalogCard> _analogCards = new Dictionary<string, AnalogCard>();
        /// <summary>
        /// A dictionary that maps a card name to an instance of <see cref=" DigitalCard"/> which is used to convert and send the output of a single digital card.
        /// </summary>
        private readonly Dictionary<string, DigitalCard> _digitalCards = new Dictionary<string, DigitalCard>();
        /// <summary>
        /// Provides functionalities to start, stop and query the status of a process in the AdWin system.
        /// </summary>
        private readonly IAdWinDriver adwinFunctions;
        /// <summary>
        /// The total number of FIFOs required. (1 for each digital card and 8 for each analog card)
        /// </summary>
        private readonly int _numberOfBuffers;

        /// <summary>
        /// The number of milliseconds this thread will sleep until it rechecks whether all sending-threads have finished transmitting the output to the hardware system.
        /// </summary>
        private const int WAIT_FOR_SENDING_THREADS_START_MILLIS = 10;


        /// <summary>
        /// Initializes a new instance of the <see cref="AdWinHwGroup"/> class.
        /// 
        /// </summary>
        /// <param name="dict">A dictionary of the raw outputs of all cards (generated by the Generator project).</param>
        /// <remarks>
        /// It creates instances of <see cref=" AnalogCard"/> or <see cref=" DigitalCard"/> for the analog and digital cards 
        /// and fills the <see cref=" _analogCards"/> and the <see cref=" _digitalCards"/> dictionaries.
        /// </remarks>
        public AdWinHwGroup(Dictionary<string, CardBasicModel.CardType> dict)
        {
            
            _numberOfBuffers = Global.GetNumOfBuffers();

            for (int i = 0; i < dict.Count; i++)
            {
                if (dict.ElementAt(i).Value == CardBasicModel.CardType.Analog)
                {
                    _analogCards.Add(dict.ElementAt(i).Key, new AnalogCard(i + 1));
                }
                else
                {
                    int digitalCardNo = i - _analogCards.Count();
                    _digitalCards.Add(dict.ElementAt(i).Key, new DigitalCard(digitalCardNo));
                }
            }

            adwinFunctions = AdWinDriverFactory.GetAdWinDriver();
        }

        #region IHardwareGroup Members


        /// <summary>
        /// Starts sending the output data to the AdWin system.
        /// </summary>
        /// <param name="data">A dictionary mapping the name of a card with its output. This dictionary is the result of the <see cref=" Generator"/> project.</param>
        /// <exception cref="System.Exception">
        /// Thrown if the dictionary does not contain the output for an existing analog or digital card.
        /// </exception>
        public void Initialize(IModelOutput data)
        {
            //DateTime time0 = DateTime.Now, time1, time2, time3;
            object adWinLock = new object();
            bool[] hasStarted = new bool[_numberOfBuffers];
            adwinFunctions.InitializeAdWin();
            ICardOutput current;

            //Start sending the output of analog cards
            foreach (KeyValuePair<string, AnalogCard> card in _analogCards)
            {
                current = data.Output.Where(param => param.Key.Equals(card.Key)).First().Value;
                card.Value.Initialize(adWinLock, hasStarted, current);
            }

            //Start sending the output of digital cards
            foreach (KeyValuePair<string, DigitalCard> card in _digitalCards)
            {
                current = data.Output.Where(param => param.Key.Equals(card.Key)).First().Value;
                card.Value.Initialize(adWinLock, hasStarted, current);
            }


            //RECO use a shared counter instead of a shared boolean array, and check for the count == number of threads. This is more efficient.
            //Wait until the sending threads have already sent the first block of data to the FIFO
            while (true)
            {
                int started = 0;
                for (int i = 0; i < _numberOfBuffers; i++)
                {
                    lock (adWinLock)
                    {
                        if (hasStarted[i])
                        {
                            started++;
                        }
                    }
                }
                if (started == _numberOfBuffers)
                {
                    break;
                }

                Thread.Sleep(WAIT_FOR_SENDING_THREADS_START_MILLIS);//CHANGED by Ghareeb Falazi on 30.06.2016
                //object lockObj = new object();
                //lock (lockObj)
                //{
                //    Monitor.Wait(lockObj, 10); // Thread.Sleep(100);
                //}
            }

        }

        /// <summary>
        /// Asks the AdWin system if it has finished processing all data in all FIFOs.
        /// </summary>
        /// <returns><c>true</c> if AdWin has finished, otherwise <c>false</c>.</returns>
        public bool HasFinished()
        {
            if (adwinFunctions.AskAdWinState() == 0)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// Orders the AdWin system to start putting the sent data on its outputs.
        /// </summary>
        public void Start()
        {
            adwinFunctions.StartAdWin();
        }
        #endregion
    }
}
